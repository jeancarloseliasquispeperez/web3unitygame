# infer.py

from model import VulnerabilityDetectionModel
from data_loader import SmartContractPreprocessor

class SmartContractAuditor:
    def __init__(self, model_name="microsoft/codebert-base"):
        self.model = VulnerabilityDetectionModel(model_name=model_name)
        self.preprocessor = SmartContractPreprocessor()

    def audit(self, contract_code):
        clean_code = self.preprocessor.clean_code(contract_code)
        functions = self.preprocessor.split_functions(clean_code)

        results = []
        for func in functions:
            prediction, confidence = self.model.predict(func)
            result = {
                "function_snippet": func,
                "vulnerable": bool(prediction),
                "confidence": confidence
            }
            results.append(result)

        return results

if __name__ == "__main__":
    contract_code = """
    pragma solidity ^0.8.0;

    contract Vulnerable {
        mapping(address => uint) public balances;

        function deposit() public payable {
            balances[msg.sender] += msg.value;
        }

        function withdraw(uint amount) public {
            require(balances[msg.sender] >= amount, "Insufficient balance");
            (bool sent, ) = msg.sender.call{value: amount}("");
            require(sent, "Failed to send Ether");
            balances[msg.sender] -= amount;
        }
    }
    """

    auditor = SmartContractAuditor()
    results = auditor.audit(contract_code)

    for res in results:
        print(f"Function: {res['function_snippet'][:60]}...")
        print(f"Vulnerable: {res['vulnerable']}, Confidence: {res['confidence']}\n")
