# model.py

from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch

class VulnerabilityDetectionModel:
    def __init__(self, model_name="microsoft/codebert-base", num_labels=2):
        self.tokenizer = AutoTokenizer.from_pretrained(model_name)
        self.model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=num_labels)

    def predict(self, code_snippet):
        inputs = self.tokenizer(code_snippet, return_tensors="pt", truncation=True, max_length=512)
        with torch.no_grad():
            outputs = self.model(**inputs)
            logits = outputs.logits
            prediction = torch.argmax(logits, dim=1).item()
        return prediction, logits.softmax(dim=1).tolist()[0]

    def load_custom_model(self, path):
        self.model.load_state_dict(torch.load(path))
